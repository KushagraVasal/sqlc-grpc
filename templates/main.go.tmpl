// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package main

import (
	"context"
	"database/sql"
	_ "embed"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"syscall"
	"time"

	"github.com/exaring/otelpgx"
	"github.com/flowchartsman/swaggerui"
	"github.com/XSAM/otelsql"
	semconv "go.opentelemetry.io/otel/semconv/v1.23.0"
	"go.uber.org/automaxprocs/maxprocs"
	// database driver
	{{if eq .SqlPackage "pgx/v5"}}"github.com/jackc/pgx/v5/pgxpool"{{else}}_ "{{ .DatabaseImport}}"{{end}}	
	{{if .MigrationPath}}{{if eq .SqlPackage "pgx/v5"}}_ "github.com/jackc/pgx/v5/stdlib"{{end}}{{end}}

	{{range .Packages}}app_{{.Package}} "{{ .GoModule}}/{{.SrcPath}}"
	{{end}}	"{{ .GoModule}}/internal/server"
	"{{ .GoModule}}/internal/server/litefs"
	"{{ .GoModule}}/internal/server/litestream"
	"{{ .GoModule}}/internal/server/instrumentation/trace"
)
{{if .Args}}//go:generate {{ .Args}}{{end}}
{{if .LiteFS}}
const (
	serviceName    = "{{ .GoModule}}"
	forwardTimeout = 10 * time.Second
){{else}}
const serviceName = "{{ .GoModule}}"
{{end}}
var (
	dbURL 		string
	tsUrl       string
	tsKey       string
	s3Url       string
	s3AccessKey string
	s3SecretKey string
	s3SSL       bool
	natsUrl     string
	{{if .Litestream}}replicationURL string{{end}}
	{{if .LiteFS}}litefsConfig   litefs.Config
	liteFS         *litefs.LiteFS{{end}}

	//go:embed api/apidocs.swagger.json
	openAPISpec []byte
)

func main() {
	if err := godotenv.Load(".env"); err != nil {
		slog.Error("Error loading environment variable", "error", err)
	}
	cfg := server.Config{
		ServiceName: serviceName,
	}
	var dev bool
	ParseEnv()
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	{{if .TypeSense}}flag.StringVar(&tsUrl, "ts-url", "", "The Typesense connection URL")
	flag.StringVar(&tsKey, "ts-key", "", "The Typesense API key"){{end}}
	{{if .S3}}flag.StringVar(&s3Url, "s3-url", "", "The S3 connection URL")
	flag.StringVar(&s3AccessKey, "s3-access-key", "", "The S3 access key")
	flag.StringVar(&s3SecretKey, "s3-secret-key", "", "The S3 secret key")
	flag.BoolVar(&s3SSL, "s3-ssl", false, "The S3 SSL"){{end}}
	{{if .Nats}}flag.StringVar(&natsUrl, "nats-url", "", "The NATS connection URL"){{end}}
	flag.IntVar(&cfg.Port, "port", 5000, "The server port")
	{{if .Metric}}flag.IntVar(&cfg.PrometheusPort, "prometheus-port", 0, "The metrics server port"){{end}}
	flag.BoolVar(&cfg.EnableCors, "cors", false, "Enable CORS middleware")
	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")
	{{if .DistributedTracing}}flag.StringVar(&cfg.OtlpEndpoint, "otlp-endpoint", "", "The Open Telemetry Protocol Endpoint (example: localhost:4317)"){{end}}
	{{if .Litestream}}flag.StringVar(&replicationURL, "replication", "", "S3 replication URL"){{end}}
	{{if .LiteFS}}litefs.SetFlags(&litefsConfig){{end}}
	flag.Parse()

	{{if .LiteFS}}dbURL = filepath.Join(litefsConfig.MountDir, dbURL){{end}}

	initLogger(dev)
	if err := run(cfg); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run(cfg server.Config) error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	{{if .LiteFS}}
	if litefsConfig.MountDir != "" {
		err := litefsConfig.Validate()
		if err != nil {
			return fmt.Errorf("liteFS parameters validation: %w", err)
		}

		liteFS, err = litefs.Start(litefsConfig)
		if err != nil {
			return fmt.Errorf("cannot start LiteFS: %w", err)
		}
		defer liteFS.Close()

		cfg.Middlewares = append(cfg.Middlewares, liteFS.ForwardToLeader(forwardTimeout, "POST", "PUT", "PATCH", "DELETE"))
		cfg.Middlewares = append(cfg.Middlewares, liteFS.ConsistentReader(forwardTimeout, "GET"))

		<-liteFS.ReadyCh()
		slog.Info("LiteFS cluster is ready")
	}
	{{end}}
	
	// Database
	db, err := DbInit(cfg, dbURL)
	if err != nil {
		return err
	}
	{{if .TypeSense}}
	// Typesense
	ts := TsInit(tsUrl, tsKey)
	{{end}}
	{{if .S3}}
	// S3
	s3Client, err := S3Init(s3Url, s3AccessKey, s3SecretKey, s3SSL)
	if err != nil {
		return err
	}
	{{end}}
	{{if .Nats}}
	// NATS
	js, err := NatsInit(natsUrl)
	if err != nil {
		return err
	}
	{{end}}

	srv := server.New(cfg, registerServer(&server.ServiceInit{
		DB:       db,
		{{if .TypeSense}}TS:       ts,{{end}}
		{{if .S3}}S3Client: s3Client,{{end}}
		{{if .Nats}}JS:       js,{{end}}
	}), registerHandlers(), httpHandlers)

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		srv.Shutdown(ctx)
	}()
	return srv.ListenAndServe()
}

func initLogger(dev bool) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}

func httpHandlers(mux *http.ServeMux) {
	mux.HandleFunc("/liveness", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
	mux.Handle("/swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))

	{{if .LiteFS}}if liteFS != nil {
		mux.HandleFunc("/nodes/", liteFS.ForwardToLeaderFunc(liteFS.ClusterHandler, forwardTimeout, "POST", "DELETE"))
	}{{end}}
}