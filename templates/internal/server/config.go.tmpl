// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package server

import (
	"context"
	"log/slog"

	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging"
	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/minio/minio-go/v7"
	"github.com/nats-io/nats.go/jetstream"
	"github.com/typesense/typesense-go/v3/typesense"
	"google.golang.org/grpc"
)

// Config represents the server configuration
type Config struct {
	ServiceName     string
	Port            int	
	EnableCors      bool
	{{if .Metric}}PrometheusPort  int{{end}}
	{{if .DistributedTracing}}OtlpEndpoint string{{end}}

	Middlewares     []HttpMiddlewareType
}

type ServiceInit struct {
	DB {{if eq .SqlPackage "database/sql"}}*sql.DB{{else}}*pgxpool.Pool{{end}}
	{{if .TypeSense}}TS       *typesense.Client{{end}}
	{{if .S3}}S3Client *minio.Client{{end}}
	{{if .Nats}}JS       *jetstream.JetStream{{end}}
}

{{if .Metric}}
// PrometheusEnabled check configuration
func (c Config) PrometheusEnabled() bool {
	return c.PrometheusPort > 0
}{{end}}
{{if .DistributedTracing}}
// TracingEnabled check configuration
func (c Config) TracingEnabled() bool {
	return c.OtlpEndpoint != ""
}{{end}}

func (c Config) grpcInterceptors() []grpc.UnaryServerInterceptor {
	interceptors := make([]grpc.UnaryServerInterceptor, 0)
	interceptors = append(interceptors, logging.UnaryServerInterceptor(interceptorLogger(slog.Default()),
		logging.WithDisableLoggingFields("protocol", "grpc.component", "grpc.method_type")))	
	interceptors = append(interceptors, errorMapper)
	interceptors = append(interceptors, recovery.UnaryServerInterceptor())

	return interceptors
}

func interceptorLogger(l *slog.Logger) logging.Logger {
	return logging.LoggerFunc(func(ctx context.Context, lvl logging.Level, msg string, fields ...any) {
		l.Log(ctx, slog.Level(lvl), msg, fields...)
	})
}
