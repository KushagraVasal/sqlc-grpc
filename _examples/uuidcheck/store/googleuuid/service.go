// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc). DO NOT EDIT.

package googleuuid

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"

	pb "uuidcheck/api/googleuuid/v1"
	"uuidcheck/internal/validation"
)

type Service struct {
	pb.UnimplementedGoogleuuidServiceServer
	querier *Queries
}

func (s *Service) CreateLocationTransactions(ctx context.Context, req *pb.CreateLocationTransactionsRequest) (*pb.CreateLocationTransactionsResponse, error) {
	var arg CreateLocationTransactionsParams
	arg.Column1 = make([]uuid.UUID, len(req.GetColumn1()))
	for i, s := range req.GetColumn1() {
		if v, err := uuid.Parse(s); err != nil {
			err = fmt.Errorf("invalid Column1: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		} else {
			arg.Column1[i] = v
		}
	}
	arg.Column2 = make([]uuid.UUID, len(req.GetColumn2()))
	for i, s := range req.GetColumn2() {
		if v, err := uuid.Parse(s); err != nil {
			err = fmt.Errorf("invalid Column2: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		} else {
			arg.Column2[i] = v
		}
	}

	err := s.querier.CreateLocationTransactions(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateLocationTransactions sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateLocationTransactionsResponse{}, nil
}

func (s *Service) CreateProduct(ctx context.Context, req *pb.CreateProductRequest) (*pb.CreateProductResponse, error) {
	var arg CreateProductParams
	arg.ID = req.GetId()
	if v := req.GetCategory(); v != nil {
		arg.Category = pgtype.Int4{Valid: true, Int32: v.Value}
	}

	result, err := s.querier.CreateProduct(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateProduct sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateProductResponse{Value: result}, nil
}

func (s *Service) CreateProductReturnAll(ctx context.Context, req *pb.CreateProductReturnAllRequest) (*pb.CreateProductReturnAllResponse, error) {
	var arg CreateProductReturnAllParams
	arg.ID = req.GetId()
	if v := req.GetCategory(); v != nil {
		arg.Category = pgtype.Int4{Valid: true, Int32: v.Value}
	}

	result, err := s.querier.CreateProductReturnAll(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateProductReturnAll sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateProductReturnAllResponse{Product: toProduct(result)}, nil
}

func (s *Service) CreateProductReturnPartial(ctx context.Context, req *pb.CreateProductReturnPartialRequest) (*pb.CreateProductReturnPartialResponse, error) {
	var arg CreateProductReturnPartialParams
	arg.ID = req.GetId()
	if v := req.GetCategory(); v != nil {
		arg.Category = pgtype.Int4{Valid: true, Int32: v.Value}
	}

	result, err := s.querier.CreateProductReturnPartial(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateProductReturnPartial sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateProductReturnPartialResponse{CreateProductReturnPartialRow: toCreateProductReturnPartialRow(result)}, nil
}

func (s *Service) CreateUser(ctx context.Context, req *pb.CreateUserRequest) (*pb.CreateUserResponse, error) {
	var arg CreateUserParams
	if v, err := uuid.Parse(req.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v := req.GetLocation(); v != nil {
		if err := json.Unmarshal([]byte(v.GetValue()), &arg.Location); err != nil {
			err = fmt.Errorf("invalid Location: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
	}

	result, err := s.querier.CreateUser(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateUser sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateUserResponse{Value: result.String()}, nil
}

func (s *Service) CreateUserReturnAll(ctx context.Context, req *pb.CreateUserReturnAllRequest) (*pb.CreateUserReturnAllResponse, error) {
	var arg CreateUserReturnAllParams
	if v, err := uuid.Parse(req.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v := req.GetLocation(); v != nil {
		if err := json.Unmarshal([]byte(v.GetValue()), &arg.Location); err != nil {
			err = fmt.Errorf("invalid Location: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
	}

	result, err := s.querier.CreateUserReturnAll(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateUserReturnAll sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateUserReturnAllResponse{User: toUser(result)}, nil
}

func (s *Service) CreateUserReturnPartial(ctx context.Context, req *pb.CreateUserReturnPartialRequest) (*pb.CreateUserReturnPartialResponse, error) {
	var arg CreateUserReturnPartialParams
	if v, err := uuid.Parse(req.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v := req.GetLocation(); v != nil {
		if err := json.Unmarshal([]byte(v.GetValue()), &arg.Location); err != nil {
			err = fmt.Errorf("invalid Location: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
	}

	result, err := s.querier.CreateUserReturnPartial(ctx, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateUserReturnPartial sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateUserReturnPartialResponse{CreateUserReturnPartialRow: toCreateUserReturnPartialRow(result)}, nil
}

func (s *Service) GetProductsByIds(ctx context.Context, req *pb.GetProductsByIdsRequest) (*pb.GetProductsByIdsResponse, error) {
	var dollar_1 []uuid.UUID
	dollar_1 = make([]uuid.UUID, len(req.GetDollar_1()))
	for i, s := range req.GetDollar_1() {
		if v, err := uuid.Parse(s); err != nil {
			err = fmt.Errorf("invalid Dollar_1: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		} else {
			dollar_1[i] = v
		}
	}

	result, err := s.querier.GetProductsByIds(ctx, dollar_1)
	if err != nil {
		slog.ErrorContext(ctx, "GetProductsByIds sql call failed", "error", err)
		return nil, err
	}
	res := new(pb.GetProductsByIdsResponse)
	for _, r := range result {
		res.List = append(res.List, toProduct(r))
	}
	return res, nil
}

func (s *Service) WithTx(tx pgx.Tx) *Service {
	return &Service{
		querier: s.querier.WithTx(tx),
	}
}
