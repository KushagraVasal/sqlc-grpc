// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc). DO NOT EDIT.

package authors

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"

	pb "authors/api/authors/v1"
	"authors/internal/validation"
)

type Service struct {
	pb.UnimplementedAuthorsServiceServer
	querier Querier
	db      *pgxpool.Pool
}

func (s *Service) CreateAuthor(ctx context.Context, req *pb.CreateAuthorRequest) (*pb.CreateAuthorResponse, error) {
	arg := new(CreateAuthorParams)
	arg.Name = req.GetName()
	if v := req.GetBio(); v != nil {
		arg.Bio = pgtype.Text{Valid: true, String: v.Value}
	}
	if v := req.GetCreatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid CreatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.CreatedAt.Valid = true
			arg.CreatedAt.Time = t
		}
	}

	result, err := s.querier.CreateAuthor(ctx, s.db, arg)
	if err != nil {
		slog.ErrorContext(ctx, "CreateAuthor sql call failed", "error", err)
		return nil, err
	}
	return &pb.CreateAuthorResponse{Authors: toAuthors(result)}, nil
}

func (s *Service) DeleteAuthor(ctx context.Context, req *pb.DeleteAuthorRequest) (*pb.DeleteAuthorResponse, error) {
	id := req.GetId()

	err := s.querier.DeleteAuthor(ctx, s.db, id)
	if err != nil {
		slog.ErrorContext(ctx, "DeleteAuthor sql call failed", "error", err)
		return nil, err
	}
	return &pb.DeleteAuthorResponse{}, nil
}

func (s *Service) GetAuthor(ctx context.Context, req *pb.GetAuthorRequest) (*pb.GetAuthorResponse, error) {
	id := req.GetId()

	result, err := s.querier.GetAuthor(ctx, s.db, id)
	if err != nil {
		slog.ErrorContext(ctx, "GetAuthor sql call failed", "error", err)
		return nil, err
	}
	return &pb.GetAuthorResponse{Authors: toAuthors(result)}, nil
}

func (s *Service) ListAuthors(ctx context.Context, req *pb.ListAuthorsRequest) (*pb.ListAuthorsResponse, error) {

	result, err := s.querier.ListAuthors(ctx, s.db)
	if err != nil {
		slog.ErrorContext(ctx, "ListAuthors sql call failed", "error", err)
		return nil, err
	}
	res := new(pb.ListAuthorsResponse)
	for _, r := range result {
		res.List = append(res.List, toAuthors(r))
	}
	return res, nil
}

func (s *Service) UpdateAuthorBio(ctx context.Context, req *pb.UpdateAuthorBioRequest) (*pb.UpdateAuthorBioResponse, error) {
	arg := new(UpdateAuthorBioParams)
	if v := req.GetBio(); v != nil {
		arg.Bio = pgtype.Text{Valid: true, String: v.Value}
	}
	arg.ID = req.GetId()

	err := s.querier.UpdateAuthorBio(ctx, s.db, arg)
	if err != nil {
		slog.ErrorContext(ctx, "UpdateAuthorBio sql call failed", "error", err)
		return nil, err
	}
	return &pb.UpdateAuthorBioResponse{}, nil
}
